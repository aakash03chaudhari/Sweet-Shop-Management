package com.cognizant.sweetitemservice;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import com.cognizant.sweetitemservice.dao.SweetItemDaoImpl;
import com.cognizant.sweetitemservice.model.SweetItem;
import com.cognizant.sweetitemservice.service.SweetItemServiceImpl;

@SpringBootTest
class SweetitemServiceApplicationTests {

//	@Test
//	void contextLoads() {
//	}


	// @Mock : because on SweetItemServiceDaoImpl have dependency to SWeetItemRepository,
		// we create mock object to simulate behaviour of the real object.
		@Mock
		SweetItemDaoImpl sweetItemDaoImpl;

		//@InjectMock : is create Object to inject mock dependency, 
		//because on this case we simulate about SweetItemDaoImpl,
		//so we create @InjectMock based on SweetItemDaoImpl.
		@InjectMocks
		SweetItemServiceImpl sweetItemServiceImpl;

		@Before
		public void init()
		{
			MockitoAnnotations.initMocks(this);
		}
		
		@Test
		public void addSweetItemAdminTest()
		{
			SweetItem sweetItem1 = new SweetItem(1,"Jalebi",(float)120,true,new Date(01/01/2020),false);
			sweetItemServiceImpl.addSweetItem(sweetItem1);
			verify(sweetItemDaoImpl,times(1)).addSweetItem(sweetItem1);
		}
		
		@Test
		public void getSweetItemListAdminTest()
		{
			List<SweetItem> sweetItemListAdmin = new ArrayList<SweetItem>();
			SweetItem sweetItem1 = new SweetItem(1,"Jalebi",(float)120,true,new Date(01/01/2020),false);
			SweetItem sweetItem2 = new SweetItem(2,"Kaju Katli",(float)300,true,new Date(02/05/1999),true);
			SweetItem sweetItem3 = new SweetItem(3,"Rasmali",(float)350,true,new Date(05/07/2002),true);
			
			sweetItemListAdmin.add(sweetItem1);
			sweetItemListAdmin.add(sweetItem2);
			sweetItemListAdmin.add(sweetItem3);
			
			when(sweetItemDaoImpl.getSweetItemListAdmin()).thenReturn(sweetItemListAdmin);
			
			//test
			List<SweetItem> sweetItemList = sweetItemServiceImpl.getSweetItemListAdmin();
			
			assertEquals(3, sweetItemList.size());
			verify(sweetItemDaoImpl,times(1)).getSweetItemListAdmin();
		}
		
		@Test
		public void getSweetItemListCustomerTest()
		{
			List<SweetItem> sweetItemListCustomer = new ArrayList<SweetItem>();
			SweetItem sweetItem1 = new SweetItem(1,"Jalebi",(float)120,true,new Date(01/01/2020),false);
			SweetItem sweetItem2 = new SweetItem(2,"Kaju Katli",(float)300,true,new Date(02/05/1999),true);
			SweetItem sweetItem3 = new SweetItem(3,"Rasmali",(float)350,true,new Date(05/07/2002),true);
			
			sweetItemListCustomer.add(sweetItem1);
			sweetItemListCustomer.add(sweetItem2);
			sweetItemListCustomer.add(sweetItem3);
			
			when(sweetItemDaoImpl.getSweetItemListCustomer()).thenReturn(sweetItemListCustomer);
			
			//test
			List<SweetItem> sweetItemList = sweetItemServiceImpl.getSweetItemListCustomer();
			
			assertEquals(2, sweetItemList.size());
			verify(sweetItemDaoImpl,times(1)).getSweetItemListCustomer();
		}
		
		@Test
		public void getSweetItemTest()
		{
			SweetItem sweetItem1 = new SweetItem(1,"Jalebi",(float)120,true,new Date(01/01/2020),false);
			when(sweetItemDaoImpl.getSweetItem(1)).thenReturn(sweetItem1);
			SweetItem expected = sweetItemServiceImpl.getSweetItem(1);
			assertThat(expected).isNotNull();
			
			
		}
		
}
